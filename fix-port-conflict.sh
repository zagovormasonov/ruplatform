#!/bin/bash

echo "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–§–õ–ò–ö–¢–ê –ü–û–†–¢–û–í (3001 vs 3000)..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Ä—Ç–∞–º–∏
diagnose_port_conflict() {
    echo -e "${BLUE}üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –ü–û–†–¢–ê–ú–ò...${NC}"

    echo -e "${YELLOW}1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ—Ä—Ç—ã –∑–∞–Ω—è—Ç—ã...${NC}"
    echo -e "   üîç –ü–æ—Ä—Ç 3000:"
    if netstat -tlnp 2>/dev/null | grep -q ":3000 "; then
        echo -e "      ${RED}‚ùå –ó–ê–ù–Ø–¢${NC}"
        netstat -tlnp | grep ":3000"
    else
        echo -e "      ${GREEN}‚úÖ –°–≤–æ–±–æ–¥–µ–Ω${NC}"
    fi

    echo -e "   üîç –ü–æ—Ä—Ç 3001:"
    if netstat -tlnp 2>/dev/null | grep -q ":3001 "; then
        echo -e "      ${RED}‚ùå –ó–ê–ù–Ø–¢${NC}"
        netstat -tlnp | grep ":3001"
    else
        echo -e "      ${GREEN}‚úÖ –°–≤–æ–±–æ–¥–µ–Ω${NC}"
    fi

    echo -e "${YELLOW}2. –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã...${NC}"
    local node_processes=$(ps aux | grep -E "node.*300[01]" | grep -v grep | wc -l)
    if [ "$node_processes" -gt 0 ]; then
        echo -e "   üìä –ù–∞–π–¥–µ–Ω–æ $node_processes Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:"
        ps aux | grep -E "node.*300[01]" | grep -v grep
    else
        echo -e "   ${GREEN}‚úÖ –ù–µ—Ç Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç–∞—Ö 3000/3001${NC}"
    fi

    echo -e "${YELLOW}3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é backend...${NC}"
    if [ -f "/home/node/ruplatform/server/.env" ]; then
        echo -e "   üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è backend (.env):"
        grep -E "PORT|port" /home/node/ruplatform/server/.env 2>/dev/null || echo -e "      ${YELLOW}‚ö†Ô∏è PORT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env${NC}"
    fi

    if [ -f "/home/node/ruplatform/server/dist/index.js" ]; then
        echo -e "   üìÑ Backend —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω"
    else
        echo -e "   ${RED}‚ùå Backend —Ñ–∞–π–ª –ù–ï –Ω–∞–π–¥–µ–Ω${NC}"
    fi

    echo -e "${YELLOW}4. –ü—Ä–æ–≤–µ—Ä—è–µ–º nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...${NC}"
    echo -e "   üìÑ nginx –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –Ω–∞ –ø–æ—Ä—Ç:"
    sudo grep -A 2 "proxy_pass" /etc/nginx/sites-available/ruplatform 2>/dev/null | grep -E "300[01]" || echo -e "      ${YELLOW}‚ö†Ô∏è nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
fix_port_configuration() {
    echo -e "${BLUE}üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ –ü–û–†–¢–û–í...${NC}"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞–∫–æ–π –ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å backend
    local backend_port=3000  # nginx –æ–∂–∏–¥–∞–µ—Ç –ø–æ—Ä—Ç 3000

    echo -e "   üîß Backend –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ø–æ—Ä—Ç—É $backend_port"

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    echo -e "   üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã..."
    pm2 stop all 2>/dev/null || true
    pm2 delete all 2>/dev/null || true
    pkill -f "node.*ruplatform" 2>/dev/null || true
    pkill -f "node.*300[01]" 2>/dev/null || true
    sleep 3

    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã
    if netstat -tlnp 2>/dev/null | grep -q ":$backend_port "; then
        echo -e "   ${RED}‚ùå –ü–æ—Ä—Ç $backend_port –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç${NC}"
        fuser -k "$backend_port"/tcp 2>/dev/null || true
        sleep 2
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend —Ñ–∞–π–ª
    if [ ! -f "/home/node/ruplatform/server/dist/index.js" ]; then
        echo -e "   ${RED}‚ùå Backend —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º...${NC}"
        cd /home/node/ruplatform/server
        npm install --production
        npm run build
    fi

    # –ó–∞–ø—É—Å–∫–∞–µ–º backend –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É
    echo -e "   üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º backend –Ω–∞ –ø–æ—Ä—Ç—É $backend_port..."
    cd /home/node/ruplatform/server
    pm2 start dist/index.js --name "ruplatform-backend" -- --port $backend_port

    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    sleep 5

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å
    if pm2 status 2>/dev/null | grep -q "online"; then
        echo -e "   ${GREEN}‚úÖ Backend –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ PM2${NC}"
        pm2 status | grep ruplatform
    else
        echo -e "   ${RED}‚ùå Backend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è${NC}"
        pm2 logs --lines 10
        return 1
    fi

    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
fix_nginx_port_config() {
    echo -e "${BLUE}üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú NGINX –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ...${NC}"

    # –ü–æ—Ä—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å nginx
    local nginx_proxy_port=3000

    echo -e "   üîß nginx –±—É–¥–µ—Ç –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø–æ—Ä—Ç $nginx_proxy_port"

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é nginx
    sudo tee /etc/nginx/sites-available/ruplatform << 'EOF'
# HTTP —Å–µ—Ä–≤–µ—Ä - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
server {
    listen 80;
    listen [::]:80;
    server_name soulsynergy.ru www.soulsynergy.ru;

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    client_max_body_size 10M;

    # –õ–æ–≥–∏
    access_log /var/log/nginx/ruplatform_access.log;
    error_log /var/log/nginx/ruplatform_error.log;

    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    location / {
        root /home/node/ruplatform/client/dist;
        try_files $uri $uri/ /index.html;

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # –ö—ç—à –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
    }

    # API –º–∞—Ä—à—Ä—É—Ç—ã - –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º –Ω–∞ –ø–æ—Ä—Ç 3000
    location /api/ {
        proxy_pass http://localhost:3000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # –¢–∞–π–º–∞—É—Ç—ã
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }

    # Socket.IO –¥–ª—è —á–∞—Ç–æ–≤
    location /socket.io/ {
        proxy_pass http://localhost:3000/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ñ–∞–π–ª–∞–º
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ \.(env|log)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# HTTPS —Å–µ—Ä–≤–µ—Ä —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name soulsynergy.ru www.soulsynergy.ru;

    # SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    ssl_certificate /etc/letsencrypt/live/soulsynergy.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/soulsynergy.ru/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    client_max_body_size 10M;

    # –õ–æ–≥–∏
    access_log /var/log/nginx/ruplatform_access.log;
    error_log /var/log/nginx/ruplatform_error.log;

    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    location / {
        root /home/node/ruplatform/client/dist;
        try_files $uri $uri/ /index.html;

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # –ö—ç—à –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
    }

    # API –º–∞—Ä—à—Ä—É—Ç—ã - –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º –Ω–∞ –ø–æ—Ä—Ç 3000
    location /api/ {
        proxy_pass http://localhost:3000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # –¢–∞–π–º–∞—É—Ç—ã
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }

    # Socket.IO –¥–ª—è —á–∞—Ç–æ–≤
    location /socket.io/ {
        proxy_pass http://localhost:3000/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ñ–∞–π–ª–∞–º
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ \.(env|log)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å www –Ω–∞ –±–µ–∑ www (HTTP)
server {
    listen 80;
    listen [::]:80;
    server_name www.soulsynergy.ru;

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
    return 301 http://soulsynergy.ru$request_uri;
}

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å www –Ω–∞ –±–µ–∑ www (HTTPS)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.soulsynergy.ru;

    ssl_certificate /etc/letsencrypt/live/soulsynergy.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/soulsynergy.ru/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
    return 301 https://soulsynergy.ru$request_uri;
}
EOF

    # –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    sudo ln -sf /etc/nginx/sites-available/ruplatform /etc/nginx/sites-enabled/
    sudo rm -f /etc/nginx/sites-enabled/default

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if sudo nginx -t; then
        echo -e "   ${GREEN}‚úÖ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞${NC}"
        sudo systemctl reload nginx
        return 0
    else
        echo -e "   ${RED}‚ùå nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ù–ï–ö–û–†–†–ï–ö–¢–ù–ê${NC}"
        sudo nginx -t
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
test_port_connection() {
    echo -e "${YELLOW}üß™ –¢–ï–°–¢–ò–†–£–ï–ú –°–û–ï–î–ò–ù–ï–ù–ò–ï –ü–û–†–¢–û–í...${NC}"

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º backend –Ω–∞–ø—Ä—è–º—É—é
    echo -e "   üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º backend (localhost:3000):"
    local backend_response=$(curl -s -w "%{http_code}" -o /dev/null "http://localhost:3000/api/articles" 2>/dev/null)
    if [ "$backend_response" = "200" ]; then
        echo -e "   ${GREEN}‚úÖ Backend –æ—Ç–≤–µ—á–∞–µ—Ç: $backend_response${NC}"
    else
        echo -e "   ${RED}‚ùå Backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: $backend_response${NC}"
    fi

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ nginx
    echo -e "   üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ nginx (HTTPS):"
    local nginx_response=$(curl -s -w "%{http_code}" -o /dev/null "https://soulsynergy.ru/api/articles" 2>/dev/null)
    if [ "$nginx_response" = "200" ]; then
        echo -e "   ${GREEN}‚úÖ nginx –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç: $nginx_response${NC}"
    else
        echo -e "   ${RED}‚ùå nginx –Ω–µ –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç: $nginx_response${NC}"
    fi

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    echo -e "   üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:"
    local endpoints=("/api/articles" "/api/experts/search" "/api/users/cities")
    for endpoint in "${endpoints[@]}"; do
        local response=$(curl -s -w "%{http_code}" -o /dev/null "https://soulsynergy.ru$endpoint" 2>/dev/null)
        if [ "$response" = "200" ]; then
            echo -e "   ${GREEN}‚úÖ $endpoint: $response${NC}"
        else
            echo -e "   ${RED}‚ùå $endpoint: $response${NC}"
        fi
    done
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
echo -e "${GREEN}üöÄ –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ö–û–ù–§–õ–ò–ö–¢ –ü–û–†–¢–û–í 3001 vs 3000${NC}"
echo ""

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
diagnose_port_conflict

echo ""
echo -e "${BLUE}üîß –ù–ê–ß–ò–ù–ê–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï...${NC}"

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
if fix_nginx_port_config; then
    echo ""
    echo -e "${BLUE}‚úÖ NGINX –ù–ê–°–¢–†–û–ï–ù –ù–ê –ü–û–†–¢ 3000${NC}"
else
    echo ""
    echo -e "${RED}‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ù–ê–°–¢–†–û–ò–¢–¨ NGINX${NC}"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º backend –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É
if fix_port_configuration; then
    echo ""
    echo -e "${BLUE}‚úÖ BACKEND –ó–ê–ü–£–©–ï–ù –ù–ê –ü–û–†–¢–£ 3000${NC}"
else
    echo ""
    echo -e "${RED}‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ó–ê–ü–£–°–¢–ò–¢–¨ BACKEND${NC}"
    exit 1
fi

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
echo ""
test_port_connection

echo ""
echo -e "${GREEN}üéâ –ö–û–ù–§–õ–ò–ö–¢ –ü–û–†–¢–û–í –ò–°–ü–†–ê–í–õ–ï–ù!${NC}"
echo ""
echo -e "${YELLOW}üîÑ –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:${NC}"
echo "   1. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ: Ctrl+Shift+R"
echo ""
echo -e "${YELLOW}üß™ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ DevTools > Network:${NC}"
echo "   - API –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 OK"
echo "   - –ù–µ—Ç –æ—à–∏–±–æ–∫ 502 Bad Gateway"
echo "   - –ù–µ—Ç –æ—à–∏–±–æ–∫ EADDRINUSE"
echo "   - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç"

echo ""
echo -e "${GREEN}üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û${NC}"
