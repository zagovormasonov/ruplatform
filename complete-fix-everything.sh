#!/bin/bash

echo "üî• –ü–û–õ–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–û–°–õ–ï SSL..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
diagnose_everything() {
    echo -e "${BLUE}üìä –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–°–ï–• –ü–†–û–ë–õ–ï–ú...${NC}"

    echo -e "${YELLOW}1. –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã...${NC}"
    if [ -f "/etc/letsencrypt/live/soulsynergy.ru/fullchain.pem" ]; then
        echo -e "   ${GREEN}‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
    else
        echo -e "   ${RED}‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
    fi

    echo -e "${YELLOW}2. –ü—Ä–æ–≤–µ—Ä—è–µ–º nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...${NC}"
    if sudo nginx -t 2>/dev/null; then
        echo -e "   ${GREEN}‚úÖ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞${NC}"
    else
        echo -e "   ${RED}‚ùå nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ù–ï–ö–û–†–†–ï–ö–¢–ù–ê${NC}"
        sudo nginx -t
    fi

    echo -e "${YELLOW}3. –ü—Ä–æ–≤–µ—Ä—è–µ–º backend —Ñ–∞–π–ª—ã...${NC}"
    if [ -f "/home/node/ruplatform/server/dist/index.js" ]; then
        echo -e "   ${GREEN}‚úÖ Backend —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω${NC}"
    else
        echo -e "   ${RED}‚ùå Backend —Ñ–∞–π–ª –ù–ï –Ω–∞–π–¥–µ–Ω${NC}"
    fi

    if [ -f "/home/node/ruplatform/server/ecosystem.config.js" ]; then
        echo -e "   ${GREEN}‚úÖ Ecosystem config –Ω–∞–π–¥–µ–Ω${NC}"
    else
        echo -e "   ${YELLOW}‚ö†Ô∏è Ecosystem config –ù–ï –Ω–∞–π–¥–µ–Ω${NC}"
    fi

    echo -e "${YELLOW}4. –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend —Ñ–∞–π–ª—ã...${NC}"
    if [ -f "/home/node/ruplatform/client/.env.production" ]; then
        echo -e "   üìÑ .env.production:"
        cat /home/node/ruplatform/client/.env.production
    else
        echo -e "   ${RED}‚ùå .env.production –ù–ï –Ω–∞–π–¥–µ–Ω${NC}"
    fi

    if [ -d "/home/node/ruplatform/client/dist" ]; then
        echo -e "   ${GREEN}‚úÖ Frontend dist –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
    else
        echo -e "   ${RED}‚ùå Frontend dist –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
    fi

    echo -e "${YELLOW}5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã...${NC}"
    local pm2_status=$(pm2 status 2>/dev/null | grep -c "online" || echo "0")
    echo -e "   üìä PM2 –æ–Ω–ª–∞–π–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: $pm2_status"

    local port_3000=$(netstat -tlnp 2>/dev/null | grep -c ":3000 " || echo "0")
    echo -e "   üìä –ü–æ—Ä—Ç 3000 –æ—Ç–∫—Ä—ã—Ç: $port_3000"

    local node_processes=$(ps aux | grep -E "node.*ruplatform|node.*3000" | grep -v grep | wc -l)
    echo -e "   üìä Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: $node_processes"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ backend
reinstall_backend() {
    echo -e "${BLUE}üîÑ –ü–ï–†–ï–£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú BACKEND...${NC}"

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ
    echo -e "   üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã..."
    pm2 stop all 2>/dev/null || true
    pm2 delete all 2>/dev/null || true
    pkill -f "node.*ruplatform" 2>/dev/null || true
    pkill -f "node.*3000" 2>/dev/null || true
    sleep 3

    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    if netstat -tlnp 2>/dev/null | grep -q ":3000 "; then
        echo -e "   ${RED}‚ùå –ü–æ—Ä—Ç 3000 –≤—Å–µ –µ—â–µ –∑–∞–Ω—è—Ç, —É–±–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ${NC}"
        fuser -k 3000/tcp 2>/dev/null || true
        sleep 2
    fi

    # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    echo -e "   üì¶ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ backend..."
    cd /home/node/ruplatform/server
    npm install --production

    # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º backend
    echo -e "   üî® –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º backend..."
    npm run build

    if [ ! -f "dist/index.js" ]; then
        echo -e "   ${RED}‚ùå –°–±–æ—Ä–∫–∞ backend –ù–ï –£–î–ê–õ–ê–°–¨${NC}"
        return 1
    fi

    echo -e "   ${GREEN}‚úÖ Backend –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω${NC}"
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ frontend
reinstall_frontend() {
    echo -e "${BLUE}üîÑ –ü–ï–†–ï–£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú FRONTEND...${NC}"

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    echo -e "   üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º VITE_API_URL..."
    echo "VITE_API_URL=https://soulsynergy.ru/api" > /home/node/ruplatform/client/.env.production

    # –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    echo -e "   üì¶ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ frontend..."
    cd /home/node/ruplatform/client
    npm install

    # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º frontend
    echo -e "   üî® –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º frontend..."
    npm run build

    if [ ! -d "dist" ]; then
        echo -e "   ${RED}‚ùå –°–±–æ—Ä–∫–∞ frontend –ù–ï –£–î–ê–õ–ê–°–¨${NC}"
        return 1
    fi

    echo -e "   ${GREEN}‚úÖ Frontend –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω${NC}"
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ nginx
setup_nginx_properly() {
    echo -e "${BLUE}üîß –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú NGINX –ü–†–ê–í–ò–õ–¨–ù–û...${NC}"

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    sudo tee /etc/nginx/sites-available/ruplatform << 'EOF'
# HTTP —Å–µ—Ä–≤–µ—Ä - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
server {
    listen 80;
    listen [::]:80;
    server_name soulsynergy.ru www.soulsynergy.ru;

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    client_max_body_size 10M;

    # –õ–æ–≥–∏
    access_log /var/log/nginx/ruplatform_access.log;
    error_log /var/log/nginx/ruplatform_error.log;

    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    location / {
        root /home/node/ruplatform/client/dist;
        try_files $uri $uri/ /index.html;

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # –ö—ç—à –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
    }

    # API –º–∞—Ä—à—Ä—É—Ç—ã
    location /api/ {
        proxy_pass http://localhost:3000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # –¢–∞–π–º–∞—É—Ç—ã
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }

    # Socket.IO –¥–ª—è —á–∞—Ç–æ–≤
    location /socket.io/ {
        proxy_pass http://localhost:3000/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ñ–∞–π–ª–∞–º
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ \.(env|log)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# HTTPS —Å–µ—Ä–≤–µ—Ä —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name soulsynergy.ru www.soulsynergy.ru;

    # SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    ssl_certificate /etc/letsencrypt/live/soulsynergy.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/soulsynergy.ru/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    client_max_body_size 10M;

    # –õ–æ–≥–∏
    access_log /var/log/nginx/ruplatform_access.log;
    error_log /var/log/nginx/ruplatform_error.log;

    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    location / {
        root /home/node/ruplatform/client/dist;
        try_files $uri $uri/ /index.html;

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # –ö—ç—à –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
    }

    # API –º–∞—Ä—à—Ä—É—Ç—ã
    location /api/ {
        proxy_pass http://localhost:3000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        # –¢–∞–π–º–∞—É—Ç—ã
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }

    # Socket.IO –¥–ª—è —á–∞—Ç–æ–≤
    location /socket.io/ {
        proxy_pass http://localhost:3000/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ñ–∞–π–ª–∞–º
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ \.(env|log)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å www –Ω–∞ –±–µ–∑ www (HTTP)
server {
    listen 80;
    listen [::]:80;
    server_name www.soulsynergy.ru;

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
    return 301 http://soulsynergy.ru$request_uri;
}

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å www –Ω–∞ –±–µ–∑ www (HTTPS)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.soulsynergy.ru;

    ssl_certificate /etc/letsencrypt/live/soulsynergy.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/soulsynergy.ru/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
    return 301 https://soulsynergy.ru$request_uri;
}
EOF

    # –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    sudo ln -sf /etc/nginx/sites-available/ruplatform /etc/nginx/sites-enabled/
    sudo rm -f /etc/nginx/sites-enabled/default

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if sudo nginx -t; then
        echo -e "   ${GREEN}‚úÖ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞${NC}"
        sudo systemctl reload nginx
        return 0
    else
        echo -e "   ${RED}‚ùå nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ù–ï–ö–û–†–†–ï–ö–¢–ù–ê${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ backend —á–µ—Ä–µ–∑ PM2
start_backend_with_pm2() {
    echo -e "${BLUE}üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú BACKEND –ß–ï–†–ï–ó PM2...${NC}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ ! -f "/home/node/ruplatform/server/dist/index.js" ]; then
        echo -e "   ${RED}‚ùå Backend —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        return 1
    fi

    # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ PM2
    cd /home/node/ruplatform/server
    pm2 start dist/index.js --name "ruplatform-backend"

    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    sleep 5

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å
    if pm2 status 2>/dev/null | grep -q "online"; then
        echo -e "   ${GREEN}‚úÖ Backend –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ PM2${NC}"
        return 0
    else
        echo -e "   ${RED}‚ùå Backend –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è${NC}"
        pm2 logs --lines 10
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
final_test_everything() {
    echo -e "${YELLOW}üß™ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï...${NC}"

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º backend –Ω–∞–ø—Ä—è–º—É—é
    echo -e "   üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º backend (localhost:3000):"
    local backend_response=$(curl -s -w "%{http_code}" -o /dev/null "http://localhost:3000/api/articles" 2>/dev/null)
    if [ "$backend_response" = "200" ]; then
        echo -e "   ${GREEN}‚úÖ Backend –æ—Ç–≤–µ—á–∞–µ—Ç: $backend_response${NC}"
    else
        echo -e "   ${RED}‚ùå Backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: $backend_response${NC}"
    fi

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ nginx
    echo -e "   üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ nginx (HTTPS):"
    local nginx_response=$(curl -s -w "%{http_code}" -o /dev/null "https://soulsynergy.ru/api/articles" 2>/dev/null)
    if [ "$nginx_response" = "200" ]; then
        echo -e "   ${GREEN}‚úÖ nginx –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç: $nginx_response${NC}"
    else
        echo -e "   ${RED}‚ùå nginx –Ω–µ –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç: $nginx_response${NC}"
    fi

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º frontend
    echo -e "   üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º frontend (HTTPS):"
    local frontend_response=$(curl -s -w "%{http_code}" -o /dev/null "https://soulsynergy.ru/" 2>/dev/null)
    if [ "$frontend_response" = "200" ]; then
        echo -e "   ${GREEN}‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω: $frontend_response${NC}"
    else
        echo -e "   ${RED}‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $frontend_response${NC}"
    fi

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    echo -e "   üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:"
    local endpoints=("/api/articles" "/api/experts/search" "/api/users/cities")
    for endpoint in "${endpoints[@]}"; do
        local response=$(curl -s -w "%{http_code}" -o /dev/null "https://soulsynergy.ru$endpoint" 2>/dev/null)
        if [ "$response" = "200" ]; then
            echo -e "   ${GREEN}‚úÖ $endpoint: $response${NC}"
        else
            echo -e "   ${RED}‚ùå $endpoint: $response${NC}"
        fi
    done
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
echo -e "${GREEN}üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–õ–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´${NC}"
echo ""

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ
diagnose_everything

echo ""
echo -e "${BLUE}üîÑ –ù–ê–ß–ò–ù–ê–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï...${NC}"

# –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º backend
if reinstall_backend; then
    echo ""
    echo -e "${BLUE}‚úÖ BACKEND –ü–ï–†–ï–£–°–¢–ê–ù–û–í–õ–ï–ù${NC}"
else
    echo ""
    echo -e "${RED}‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ü–ï–†–ï–£–°–¢–ê–ù–û–í–ò–¢–¨ BACKEND${NC}"
    exit 1
fi

# –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º frontend
if reinstall_frontend; then
    echo ""
    echo -e "${BLUE}‚úÖ FRONTEND –ü–ï–†–ï–£–°–¢–ê–ù–û–í–õ–ï–ù${NC}"
else
    echo ""
    echo -e "${RED}‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ü–ï–†–ï–£–°–¢–ê–ù–û–í–ò–¢–¨ FRONTEND${NC}"
    exit 1
fi

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º nginx
if setup_nginx_properly; then
    echo ""
    echo -e "${BLUE}‚úÖ NGINX –ù–ê–°–¢–†–û–ï–ù${NC}"
else
    echo ""
    echo -e "${RED}‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ù–ê–°–¢–†–û–ò–¢–¨ NGINX${NC}"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º backend —á–µ—Ä–µ–∑ PM2
if start_backend_with_pm2; then
    echo ""
    echo -e "${BLUE}‚úÖ BACKEND –ó–ê–ü–£–©–ï–ù –ß–ï–†–ï–ó PM2${NC}"
else
    echo ""
    echo -e "${RED}‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ó–ê–ü–£–°–¢–ò–¢–¨ BACKEND${NC}"
    exit 1
fi

# –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
echo ""
final_test_everything

echo ""
echo -e "${GREEN}üéâ –ü–û–õ–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!${NC}"
echo ""
echo -e "${YELLOW}üîÑ –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:${NC}"
echo "   1. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ: Ctrl+Shift+R"
echo ""
echo -e "${YELLOW}üß™ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:${NC}"
echo "   - –ù–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ JavaScript"
echo "   - API –∑–∞–ø—Ä–æ—Å—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 200 OK"
echo "   - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç"
echo "   - –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç"
echo "   - –ù–µ—Ç –æ—à–∏–±–æ–∫ Mixed Content –∏–ª–∏ 502"

echo ""
echo -e "${GREEN}üî• –í–°–ï –î–û–õ–ñ–ù–û –†–ê–ë–û–¢–ê–¢–¨ –¢–ï–ü–ï–†–¨!${NC}"
