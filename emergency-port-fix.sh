#!/bin/bash

echo "üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–†–¢–ê 3001 -> 3000"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –í–°–ï–ì–û
force_stop_all() {
    echo -e "${RED}üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –í–°–ï...${NC}"

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PM2
    echo -e "   üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PM2..."
    pm2 stop all 2>/dev/null || true
    pm2 delete all 2>/dev/null || true
    pm2 kill 2>/dev/null || true

    # –£–±–∏–≤–∞–µ–º –≤—Å–µ Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã
    echo -e "   üíÄ –£–±–∏–≤–∞–µ–º –≤—Å–µ Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã..."
    pkill -9 node 2>/dev/null || true
    pkill -9 -f "ruplatform" 2>/dev/null || true
    pkill -9 -f "300[01]" 2>/dev/null || true
    pkill -9 -f "dist/index.js" 2>/dev/null || true

    # –û–∂–∏–¥–∞–µ–º
    sleep 3

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    local remaining_processes=$(ps aux | grep -E "node.*300[01]|node.*ruplatform" | grep -v grep | wc -l)
    if [ "$remaining_processes" -gt 0 ]; then
        echo -e "   ${YELLOW}‚ö†Ô∏è  –í—Å–µ –µ—â–µ –µ—Å—Ç—å $remaining_processes –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —É–±–∏–≤–∞–µ–º –∂–µ—Å—Ç–∫–æ...${NC}"
        ps aux | grep -E "node.*300[01]|node.*ruplatform" | grep -v grep | awk '{print $2}' | xargs kill -9 2>/dev/null || true
        sleep 2
    fi

    echo -e "   ${GREEN}‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
free_ports() {
    echo -e "${BLUE}üîì –û–°–í–û–ë–û–ñ–î–ê–ï–ú –ü–û–†–¢–´ 3000 –ò 3001...${NC}"

    # –ü–æ—Ä—Ç 3000
    if netstat -tlnp 2>/dev/null | grep -q ":3000 "; then
        echo -e "   üîì –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç 3000..."
        fuser -k 3000/tcp 2>/dev/null || true
        lsof -ti:3000 | xargs kill -9 2>/dev/null || true
    fi

    # –ü–æ—Ä—Ç 3001
    if netstat -tlnp 2>/dev/null | grep -q ":3001 "; then
        echo -e "   üîì –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç 3001..."
        fuser -k 3001/tcp 2>/dev/null || true
        lsof -ti:3001 | xargs kill -9 2>/dev/null || true
    fi

    sleep 2

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã
    local port_3000=$(netstat -tlnp 2>/dev/null | grep -c ":3000 " || echo "0")
    local port_3001=$(netstat -tlnp 2>/dev/null | grep -c ":3001 " || echo "0")

    echo -e "   üìä –ü–æ—Ä—Ç 3000 —Å–≤–æ–±–æ–¥–µ–Ω: $([ "$port_3000" -eq 0 ] && echo '‚úÖ' || echo '‚ùå')"
    echo -e "   üìä –ü–æ—Ä—Ç 3001 —Å–≤–æ–±–æ–¥–µ–Ω: $([ "$port_3001" -eq 0 ] && echo '‚úÖ' || echo '‚ùå')"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ backend
fix_backend_config() {
    echo -e "${BLUE}üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ BACKEND...${NC}"

    cd /home/node/ruplatform/server

    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ .env —Ñ–∞–π–ª –µ—Å—Ç—å –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç
    if [ ! -f ".env" ]; then
        echo -e "   üìÑ –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª..."
        echo "PORT=3000" > .env
    else
        echo -e "   üìù –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª..."
        sed -i 's/PORT=[0-9]*/PORT=3000/g' .env
    fi

    echo -e "   üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ .env:"
    cat .env

    # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º backend
    echo -e "   üî® –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º backend..."
    npm install --production 2>/dev/null
    npm run build 2>/dev/null

    if [ -f "dist/index.js" ]; then
        echo -e "   ${GREEN}‚úÖ Backend –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω${NC}"
    else
        echo -e "   ${RED}‚ùå –°–±–æ—Ä–∫–∞ backend –ù–ï –£–î–ê–õ–ê–°–¨${NC}"
        return 1
    fi

    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
fix_nginx_config() {
    echo -e "${BLUE}üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú NGINX –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ...${NC}"

    sudo tee /etc/nginx/sites-available/ruplatform << 'EOF'
server {
    listen 80;
    listen [::]:80;
    server_name soulsynergy.ru www.soulsynergy.ru;

    client_max_body_size 10M;
    access_log /var/log/nginx/ruplatform_access.log;
    error_log /var/log/nginx/ruplatform_error.log;

    location / {
        root /home/node/ruplatform/client/dist;
        try_files $uri $uri/ /index.html;

        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
    }

    location /api/ {
        proxy_pass http://localhost:3000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }

    location /socket.io/ {
        proxy_pass http://localhost:3000/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ \.(env|log)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name soulsynergy.ru www.soulsynergy.ru;

    ssl_certificate /etc/letsencrypt/live/soulsynergy.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/soulsynergy.ru/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;

    client_max_body_size 10M;
    access_log /var/log/nginx/ruplatform_access.log;
    error_log /var/log/nginx/ruplatform_error.log;

    location / {
        root /home/node/ruplatform/client/dist;
        try_files $uri $uri/ /index.html;

        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
    }

    location /api/ {
        proxy_pass http://localhost:3000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;

        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
    }

    location /socket.io/ {
        proxy_pass http://localhost:3000/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ \.(env|log)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

server {
    listen 80;
    listen [::]:80;
    server_name www.soulsynergy.ru;
    return 301 http://soulsynergy.ru$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.soulsynergy.ru;
    ssl_certificate /etc/letsencrypt/live/soulsynergy.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/soulsynergy.ru/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    return 301 https://soulsynergy.ru$request_uri;
}
EOF

    # –í–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    sudo ln -sf /etc/nginx/sites-available/ruplatform /etc/nginx/sites-enabled/
    sudo rm -f /etc/nginx/sites-enabled/default

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
    if sudo nginx -t; then
        echo -e "   ${GREEN}‚úÖ nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞${NC}"
        sudo systemctl reload nginx
        return 0
    else
        echo -e "   ${RED}‚ùå nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ù–ï–ö–û–†–†–ï–ö–¢–ù–ê${NC}"
        sudo nginx -t
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ backend –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É
start_backend_correctly() {
    echo -e "${BLUE}üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú BACKEND –ù–ê –ü–û–†–¢–£ 3000...${NC}"

    cd /home/node/ruplatform/server

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ—Ä—Ç–∞ 3000
    echo -e "   üì° –ó–∞–ø—É—Å–∫–∞–µ–º: pm2 start dist/index.js --name 'ruplatform-backend' -- --port 3000"

    pm2 start dist/index.js --name "ruplatform-backend" -- --port 3000

    # –ñ–¥–µ–º
    sleep 5

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    pm2 status

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Ä—Ç 3000 —Å–ª—É—à–∞–µ—Ç—Å—è
    local port_3000=$(netstat -tlnp 2>/dev/null | grep -c ":3000 " || echo "0")
    if [ "$port_3000" -gt 0 ]; then
        echo -e "   ${GREEN}‚úÖ –ü–æ—Ä—Ç 3000 –æ—Ç–∫—Ä—ã—Ç${NC}"
    else
        echo -e "   ${RED}‚ùå –ü–æ—Ä—Ç 3000 –ù–ï –æ—Ç–∫—Ä—ã—Ç${NC}"
        return 1
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
    echo -e "   üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ PM2:"
    pm2 logs --lines 5

    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
test_everything() {
    echo -e "${YELLOW}üß™ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï...${NC}"

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º backend –Ω–∞–ø—Ä—è–º—É—é
    echo -e "   üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º backend (localhost:3000):"
    local backend_response=$(curl -s -w "%{http_code}" -o /dev/null "http://localhost:3000/api/articles" 2>/dev/null)
    if [ "$backend_response" = "200" ]; then
        echo -e "   ${GREEN}‚úÖ Backend –æ—Ç–≤–µ—á–∞–µ—Ç: $backend_response${NC}"
    else
        echo -e "   ${RED}‚ùå Backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: $backend_response${NC}"
    fi

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ nginx
    echo -e "   üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ nginx (HTTPS):"
    local nginx_response=$(curl -s -w "%{http_code}" -o /dev/null "https://soulsynergy.ru/api/articles" 2>/dev/null)
    if [ "$nginx_response" = "200" ]; then
        echo -e "   ${GREEN}‚úÖ nginx –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç: $nginx_response${NC}"
    else
        echo -e "   ${RED}‚ùå nginx –Ω–µ –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç: $nginx_response${NC}"
    fi

    echo -e "   üìä –ü–æ—Ä—Ç 3000: $(netstat -tlnp 2>/dev/null | grep -c ":3000 " || echo "0") –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
    echo -e "   üìä PM2: $(pm2 status 2>/dev/null | grep -c "online" || echo "0") –æ–Ω–ª–∞–π–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
}

# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê
echo -e "${GREEN}üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–†–¢–û–í${NC}"
echo ""

# –®–∞–≥ 1: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ
force_stop_all
echo ""

# –®–∞–≥ 2: –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç—ã
free_ports
echo ""

# –®–∞–≥ 3: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é backend
if fix_backend_config; then
    echo ""
    echo -e "${BLUE}‚úÖ BACKEND –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ê${NC}"
else
    echo ""
    echo -e "${RED}‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ò–°–ü–†–ê–í–ò–¢–¨ BACKEND –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ${NC}"
    exit 1
fi

# –®–∞–≥ 4: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º nginx
if fix_nginx_config; then
    echo ""
    echo -e "${BLUE}‚úÖ NGINX –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ê${NC}"
else
    echo ""
    echo -e "${RED}‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ò–°–ü–†–ê–í–ò–¢–¨ NGINX –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ${NC}"
    exit 1
fi

# –®–∞–≥ 5: –ó–∞–ø—É—Å–∫–∞–µ–º backend –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É
if start_backend_correctly; then
    echo ""
    echo -e "${BLUE}‚úÖ BACKEND –ó–ê–ü–£–©–ï–ù –ù–ê –ü–û–†–¢–£ 3000${NC}"
else
    echo ""
    echo -e "${RED}‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ó–ê–ü–£–°–¢–ò–¢–¨ BACKEND${NC}"
    exit 1
fi

# –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä—É–µ–º
echo ""
test_everything

echo ""
echo -e "${GREEN}üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!${NC}"
echo ""
echo -e "${YELLOW}üîÑ –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:${NC}"
echo "   1. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ: Ctrl+Shift+R"
echo ""
echo -e "${YELLOW}üß™ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ DevTools > Network:${NC}"
echo "   - API –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200 OK"
echo "   - –ù–µ—Ç –æ—à–∏–±–æ–∫ 502 Bad Gateway"
echo "   - –ù–µ—Ç –æ—à–∏–±–æ–∫ EADDRINUSE"
echo "   - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç"
echo ""
echo -e "${GREEN}üî• –î–û–õ–ñ–ù–û –†–ê–ë–û–¢–ê–¢–¨ –¢–ï–ü–ï–†–¨!${NC}"
